// Helpers
// 
// @group Functions / Helpers
// @author Elliot Mitchum

// Math
// ------------------------------

// th-math-power
// Returns a powered number by exponent.
//
// @since 0.0.11
// @type function
//
// @param {number} $number The base number (required). 
// @param {number} $exponent The base number's exponent (required). 
//
// @returns {number} The powered number.
//
// @example scss Calculate 10 to the power of 3.
// // th-math-power(10, 3)
// // // 1000

@function th-math-power(
  $number,
  $exponent
){
  $_return: $number;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $_return: $_return * $number;
    }
  }
  @if $exponent < 1 {
    @for $i from 0 through -#{$exponent} {
      $_return: $_return / $number;
    }
  }
  @return $_return; 
}

// th-math-round-to
// Returns a floated number rounded to a decimal point.
//
// @since 0.0.11
// @type function
//
// @requires {function} th-math-power
//
// @param {number} $number The number to round from (required).
// @param {number} $decimal The decimal place to round to (required).
//
// @returns {number} The rounded number.
//
// @example scss Round 1.234 to 2 decimal places.
// // th-math-round-to(1.234, 2)
// // // 1.23

@function th-math-round-to(
  $number,
  $decimal
){
  $_return: $number;
  $_return: round( $number * th-math-power(10, $decimal) );
  $_return: $_return / th-math-power(10, $decimal);
  @return $_return;
}

// Lists
// ------------------------------

// th-list-has-index
// Check list for a index.
//
// @since 0.0.1
// @type function
//
// @param {list} $list List to search (required).
// @param {number} $index The list index to retrieve (required). 
//
// @returns {boolean} If list contains index.
//
// @example scss Check list for 2nd index.
// // @debug th-list-has-index((a, b, c), 2);
// // // true

@function th-list-has-index(
  $list,
  $index
){
	$_return: false;
  @if list == type-of($list) and length($list) >= $index {
    $_return: true;
  }
  @return $_return;
}

// th-list-get-index
// Return the index of a value in a list..
//
// @since 0.0.11
// @type Function
//
// @param {list} $list The list to search through (required).
// @param {number | string} $find The value to find (required).
//
// @returns {number} The index of the found value.
//
// @example scss Get the index of 'b' in (a, b, c).
// // th-list-get-index( (a, b, c), b )
// // // 2

@function th-list-get-index(
  $list,
  $find
){
  $_return: $find;
  @each $value in $list {
    @if $find == $value {
      $_return: index($list, $value);
    }
  }
  @return $_return;
}

// th-list-get-index-deep
// Return the index of a value within multiple lists.
//
// @since 0.0.11
// @type function
//
// @requires {function} th-list-has
//
// @param {list} $list The list to search through (required).
// @param {number | string} $find The value to find (required).
// @param {list} $indexes List of previous indexes.
//
// @returns {list} The index of the found value.
//
// @example scss Get the index of 'f' in (a, b, (c, d, (e, f))).
// // th-list-get-index-deep( (a, b, (c, d, (e, f))), f )
// // // 3 3 2

@function th-list-get-index-deep(
  $list,
  $find,
  $indexes: ()
){
  $_return: $find;
  $index: 0;
  @if th-list-has($list, $find) {
    @if length($indexes) > 0 {
      $_return: append($indexes, index($list, $find));
    } @else {
      $_return: index($list, $find);
    }
  } @else {
    @each $value in $list {
      $index: $index + 1;
      @if type-of($value) == list {
        $_return: th-list-get-index-deep($value, $find, append($indexes, $index));
      }
    }
  }
  @return $_return;
}

// th-list-has
// Check list for a value.
//
// @since 0.0.1
// @type function
//
// @param {list} $list List to search (required).
// @param {number | string} $find Value to find (required). 
//
// @returns {boolean} If list contains value.
//
// @example scss Check list for 'b'.
// // th-list-has((a b c), b);
// // // true

@function th-list-has(
  $list,
  $find
){
  $_return: false;
  @each $value in $list {
    @if $find == $value {
      @return true;
    }
  }
  @return $_return;
}

// th-list-has-deep
// Check list for a value (recurring).
//
// @since 0.0.10
// @type function
//
// @param {list} $list List to search (required). 
// @param {number | string} $find Value to find (required). 
//
// @returns {boolean} If list contains value.
//
// @example scss Check for 'f' in (a b (c d (e f))).
// // th-list-has-deep((a b (c d (e f))), f)
// // // true

@function th-list-has-deep(
  $list,
  $find
){
  $_return: false;
  @each $value in $list {
    @if list == type-of($value) {
      $_return: th-list-has-deep($value, $find);
    } @else {
      @if $find == $value {
        @return true;
      }
    }
  }
  @return $_return;
}

// th-list-get-deep
// Returns a value within lists by a list of indexes (recurring).
//
// @since 0.0.10
// @type function
//
// @requires {function} th-list-has-index
// @requires {function} th-list-get-deep
//
// @param {list} $list List to search (required). 
// @param {list} $index List indexes to run (required).
//
// @returns {number | string} The found list value.
//
// @example scss Return 'f' in (a b (c d (e f))).
// // (example)
// // // (result)

// @function th-list-get-deep
//
// Returns a value within lists by a list of indexes (recurring).
// @param $list: list | List to search (required).
// @param $index: mixed | List index(es) to find (required).
// @return $_return: mixed | List value to found.

@function th-list-get-deep(
  $list,
  $index
){
  $_return: false;
  $indexes: false;
  @if list == type-of($index) {
    $indexes: $index;
    $index: nth($index, 1);
  }
  @if th-list-has-index($list, $index) { 
    $list: nth($list, $index);
    @if list == type-of($list) and $indexes {
      $list: th-list-get-deep($list, nth($indexes, 2));
    }
  } @else if( list != type-of($list) and $index == 1 ) {
    $list: $list;
  } @else {
    $list: false;
  }
  $_return: $list;
  @return $_return;
}

// @function th-list-remove-nth
// 
// Removes a list item by it's index / nth.
// @param $list: list | List to search (required).
// @param $index: mixed | List index(es) to find (required).

@function th-list-remove-nth(
  $list,
  $index
){
  $_return: ();
  @each $value in $list {
    @if $index != index($list, $value) {
      $_return: append($_return, $value);
    }
  }
  @return $_return;
}

// Units
// ------------------------------

// @function th-unit-strip()
//
// Strips the unit from a number.
// @param $number: number | Number to strip unit from.
// @return $_return: number | The stripped number.

@function th-unit-strip(
  $number
){
  $_return: $number / ($number * 0 + 1);
  @return $_return;
}

// @function th-unit-cast
//
// Creates a number with a unit.
// @param $multiplier: number | Unitless number.
// @param $unit: string | The type of unit for the number.
// @return $_return: number | The number with a unit.

@function th-unit-cast(
  $number,
  $unit
){
  $_return: $number;
  $strings: px em rem;
  $units: 1px 1em 1rem;
  $index: index($strings, $unit);
  @if $index {
    $_return: $number * nth($units, $index);
  }
  @return $_return;
}

// @function th-unit-convert
//
// Converts the unit of a number.
// @param $number: number | A number to convert.
// @param $unit: string | The unit to convert to.
// @return $_return: number | The converted number.

@function th-unit-convert(
  $number,
  $unit
){
  $_return: $number;
  $_return: th-unit-strip($number) * th-unit-cast(1, $unit);
  @if ($_return == th-unit-cast(0, $unit)) { 
    $_return: 0;
  }
  @return $_return;
}


// @function th-unit-convert-absolute
//
// Converts a relative number to an absolute number.
// @access private
// @param $number: number | The number to convert.
// @param $unit: string | The type of absolute unit.
// @param $base-font-size: number | Font size used for relative calculations.
// @return $_return: number | The converted absolute number.

@function th-unit-convert-absolute(
  $number,
  $unit,
  $base-font-size: $th-base-font-size
){
  $_return: $number;
  $_return: th-unit-strip($number) * th-unit-strip($base-font-size);
  $_return: th-math-round-to($_return, 5);
  @if $unit {
    $_return: th-unit-convert($_return, $unit);
  }
  @return $_return;
}

// @function th-unit-convert-relative
//
// Converts an absolute number to a relative number.
// @access private
// @param $number: number | The number to convert.
// @param $unit: string | The type of relative unit.
// @param $base-font-size: number | Font size used for relative calculations.
// @return $_return: number | The converted number.

@function th-unit-convert-relative(
  $number,
  $unit,
  $base-font-size: $th-base-font-size
){
  $_return: $number;
  $_return: th-unit-strip($number) / th-unit-strip($base-font-size);
  $_return: th-math-round-to($_return, 5);
  @if $unit {
    $_return: th-unit-convert($_return, $unit);
  }
  @return $_return;
}

// @function th-unit-convert-em
//
// Converts a number to an em number.
// @access private
// @param $number: number | The number to convert.
// @param $base-font-size: number | Font size used for relative calculations.
// @return $_return: number | The converted number.

@function th-unit-convert-em(
  $number,
  $base-font-size: $th-base-font-size
){
  $_return: $number;
  $_return: th-unit-convert-relative($number, em, $base-font-size);
  @return $_return;
}

// @function th-unit-convert-rem
//
// Converts a number to a rem number.
// @access private
// @param $number: number | The number to convert.
// @param $base-font-size: number | Font size used for relative calculations.
// @return $_return: number | The converted number.

@function th-unit-convert-rem(
  $number,
  $base-font-size: $th-base-font-size
){
  $_return: $number;
  $_return: th-unit-convert-relative($number, rem, $base-font-size);
  @return $_return;
}

// @function th-unit-convert-rel
//
// Converts a number to a relative number.
// @access private
// @param $number: number | The number to convert.
// @param $base-font-size: number | Font size used for relative calculations.
// @return $_return: number | The converted number.

@function th-unit-convert-rel(
  $number,
  $base-font-size: $th-base-font-size
){
  $_return: $number;
  $_return: th-unit-convert-relative($number, false, $base-font-size);
  @return $_return;
}

// @function th-unit-convert-px
//
// Converts a relative number to a px number.
// @access private
// @param $number: number | The number to convert.
// @param $base-font-size: number | Font size used for relative calculations.
// @return $_return: number | The converted number.

@function th-unit-convert-px(
  $number,
  $base-font-size: $th-base-font-size
){
  $_return: $number;
  $_return: th-unit-convert-absolute($number, px, $base-font-size);
  @return $_return;
}