// Functions / Helpers

// Lists
// ------------------------------

// @function th-list-has-index()
//
// Check list for a index.
// @param $list: list | List to search (required).
// @param $index: number | List index to find (required).
// @return $_return: boolean | If list contains index.

@function th-list-has-index(
  $list,
  $index
){
	$_return: false;
  @if list == type-of($list) and length($list) >= $index {
    $_return: true;
  }
  @return $_return;
}

// @function th-list-get-deep
//
// Gets a value within lists by a list of indexes (recurring).
// @param $list: list | List to search (required).
// @param $index: mixed | List index(es) to find (required).
// @return $_return: mixed | List value to found.

@function th-list-get-deep(
  $list,
  $index
){
  $_return: false;
  $indexes: false;
  @if list == type-of($index) {
    $indexes: $index;
    $index: nth($index, 1);
  }
  @if th-list-has-index($list, $index) { 
    $list: nth($list, $index);
    @if list == type-of($list) and $indexes {
      $list: th-list-get-deep($list, nth($indexes, 2));
    }
  } @else if( list != type-of($list) and $index == 1 ) {
    $list: $list;
  } @else {
    $list: false;
  }
  $_return: $list;
  @return $_return;
}

// @function th-list-has()
//
// Check list for a value.
// @param $list: list | List to search (required).
// @param $find: mixed | Value to find (required).
// @return $_return: boolean | If list contains value.

@function th-list-has(
  $list,
  $find
){
  $_return: false;
  @each $value in $list {
    @if $find == $value {
      @return true;
    }
  }
  @return $_return;
}

// @function th-list-deep-has()
//
// Check list for a value (recurring).
// @param $list: list | List to search (required).
// @param $find: mixed | Value to find (required).
// @return $_return: boolean | If list contains value.

@function th-list-deep-has(
	$list,
	$find
){
	$_return: false;
	@each $value in $list {
		@if list == type-of($value) {
			$_return: th-list-deep-has($value, $find);
		} @else {
			@if $find == $value {
				@return true;
			}
		}
	}
	@return $_return;
}

// @function th-list-remove-nth
// 
// Removes a list item by it's index / nth.
// @param $list: list | List to search (required).
// @param $index: mixed | List index(es) to find (required).

@function th-list-remove-nth(
  $list,
  $index
){
  $_return: ();
  @each $value in $list {
    @if $index != index($list, $value) {
      $_return: append($_return, $value);
    }
  }
  @return $_return;
}

// Units
// ------------------------------

// @function th-unit-strip()
//
// Strips the unit from a number.
// @param $number: number | Number to strip unit from.
// @return $_return: number | The stripped number.

@function th-unit-strip(
  $number
){
  $_return: $number / ($number * 0 + 1);
  @return $_return;
}

// @function th-unit-cast
//
// Creates a number with a unit.
// @param $multiplier: number | Unitless number.
// @param $unit: string | The type of unit for the number.
// @return $_return: number | The number with a unit.

@function th-unit-cast(
  $number,
  $unit
){
  $_return: $number;
  $strings: 'px' 'em' 'rem';
  $units: 1px 1em 1rem;
  $index: index($strings, $unit);
  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
  } @else {
    $_return: $number * nth($units, $index);
  }
  @return $_return;
}

// @function th-unit-convert
//
// Converts the unit of a number.
// @param $number: number | A number to convert.
// @param $unit: string | The unit to convert to.
// @return $_return: number | The converted number.

@function th-unit-convert(
  $number,
  $unit
){
  $_return: $number;
  $_return: th-unit-strip($number) * th-unit-cast(1, $unit);
  @if ($_return == th-unit-cast(0, $unit)) { 
    $_return: 0;
  }
  @return $_return;
}