// Functions / Property

// $th-properties
//
// Define heading properties.

$th-properties: (
  font-size,
  line-height,
  (margin-top margin-bottom),
  breakpoint
  );

// @function th-property
//
// Return heading list property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $property-name: string | A heading property name (required). | $th-defaults
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading property value.

@function th-property(
  $heading,
  $property-name,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $heading-list: th-heading-get($heading, $breakpoint);
  $property-index: _th-property-index($property-name);
  $_return: th-list-get-deep($heading-list, $property-index);
  @if $_return == default or $_return == false { 
    $_return: th-property-default($property-name, $base-font-size, false);
  }
  @if $convert == true {
    $_return: _th-unit($property-name, $_return, $base-font-size);
  }
  @return $_return;
}

// @function th-property-font-size
// 
// Return heading list font size property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list font size property value.

@function th-property-font-size(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, font-size, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-line-height
// 
// Return heading list line height property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list line height property value.

@function th-property-line-height(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, line-height, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-margin-top
// 
// Return heading list margin top property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list margin top property value.

@function th-property-margin-top(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, margin-top, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-margin-bottom
// 
// Return heading list margin bottom property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list margin bottom property value.

@function th-property-margin-bottom(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, margin-bottom, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-default()
//
// Return a default heading property value.
// @param $property-name: string | A heading property name (required). | $th-defaults
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Default heading property value.

@function th-property-default(
  $property-name,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: $property-name;
  $_return: map-get($th-defaults, $property-name);
  @if $convert == true {
    $_return: _th-unit($property-name, $_return, $base-font-size);
  }
  @return $_return;
}

// @function _th-property-name-exists()
//
// Check if a heading property name exists.
// @access private
// @param $property-name: string | A property name (required). | $th-properties
// @param $_return: boolean | If property name exists.

@function _th-property-name-exists(
  $property-name
){
  $_return: false;
  @if th-list-deep-has($th-properties, $property-name) { 
    $_return: true;
  }
  @return $_return;
}

// @function _th-property-index()
//
// Return index of a property name.
// @access private
// @param $property-name: string | A property name (required). | $th-properties
// @return $_return: mixed | Property name index.

@function _th-property-index(
  $property-name
){
  $_return: $property-name;
  @each $property in $th-properties {
    @if type-of($property) == list {
      @each $property-inner in $property {
        @if $property-inner == $property-name {
          $property-index-outer: index($th-properties, $property);
          $property-index-inner: index($property, $property-inner);
          $_return: ($property-index-outer, $property-index-inner);
        }
      }
    } @else if $property == $property-name {
      $_return: index($th-properties, $property); 
    }
  }
  @return $_return;
}