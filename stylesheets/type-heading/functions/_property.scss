// Property
// 
// @group Functions / Property
// @author Elliot Mitchum

// th-properties
// An ordered list of available properties.
//
// @since 0.0.10
// @type List
// @access private

$th-properties: (
  font-size,
  line-height,
  (margin-top margin-bottom),
  breakpoint
);

// th-property
// Return heading list property value.
//
// @since 0.0.10
// @type function
//
// @requires {function} th-heading-get
// @requires {function} th-list-get-index-deep
// @requires {function} th-property-get
// @requires {function} th-property-default
// @requires {function} _th-property-unit-convert
//
// @param {list | string} $heading A heading map key or list (required).
// @param {string} $property-name (font-size | line-height | margin-top | margin-bottom | breakpoint) A heading property name (required).
// @param {number | boolean} A heading list breakpoint.
// @param {boolean} $convert (true) If returned value should be unit converted.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} Heading property value.
//
// @example scss Return font size from a h1 heading map.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size
// // )
// @example scss Return font size from a h1 heading map with a breakpoint of 768px.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size,
// //   $breakpoint: 768px
// // )
// @example scss Return font size from a h1 heading map without unit conversion.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size,
// //   $convert: false
// // )
// @example scss Return font size from a h1 with a base font size of 24px.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size,
// //   $base-font-size: 24px
// // )

@function th-property(
  $heading,
  $property-name,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  $heading-list: th-heading-get($heading, $breakpoint);
  $property-index: th-list-get-index-deep($th-properties, $property-name);
  $_return: th-property-get($heading-list, $property-index);
  @if $_return == default or $_return == false { 
    $_return: th-property-default($property-name, $base-font-size, false);
  }
  @if $convert == true {
    $_return: _th-property-unit-convert($property-name, $_return, $base-font-size);
  }
  @return $_return;
}

@function th-property-get(
  $heading,
  $property-indexes
  ){
  $_return: false;
  @if list == type-of($heading) {
    $_return: $heading;
    @for $i from 1 through length($property-indexes) {
      @if th-list-has-index($_return, nth($property-indexes, $i)) {
        $_return: nth($_return, nth($property-indexes, $i));
      } @else if $i == 1 {
        $_return: false;
      }
    }
  } @else if $property-indexes == 1 {
    $_return: $heading;
  }
  @return $_return;
}

// @function th-property-font-size
// 
// Return heading list font size property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list font size property value.

@function th-property-font-size(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, font-size, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-line-height
// 
// Return heading list line height property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list line height property value.

@function th-property-line-height(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, line-height, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-margin-top
// 
// Return heading list margin top property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list margin top property value.

@function th-property-margin-top(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, margin-top, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-margin-bottom
// 
// Return heading list margin bottom property value.
// @param $heading: mixed | A heading map key or list (required). | $th-headings
// @param $breakpoint: number | A heading list breakpoint (optional). | $th-headings
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Heading list margin bottom property value.

@function th-property-margin-bottom(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: th-property($heading, margin-bottom, $breakpoint, $base-font-size, $convert);
  @return $_return;
}

// @function th-property-default()
//
// Return a default heading property value.
// @param $property-name: string | A heading property name (required). | $th-property-defaults
// @param $base-font-size: number | Number to calculate values from (optional).
// @return $_return: number | Default heading property value.

@function th-property-default(
  $property-name,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  $_return: $property-name;
  $_return: map-get($th-property-defaults, $property-name);
  @if $convert == true {
    $_return: _th-property-unit-convert($property-name, $_return, $base-font-size);
  }
  @return $_return;
}

// @function _th-property-name-exists()
//
// Check if a heading property name exists.
// @access private
// @param $property-name: string | A property name (required). | $th-properties
// @param $_return: boolean | If property name exists.

@function _th-property-name-exists(
  $property-name
){
  $_return: false;
  @if th-list-has-deep($th-properties, $property-name) { 
    $_return: true;
  }
  @return $_return;
}

// @function _th-property-unit-get
//
// Returns a property's "convert to" unit.
// @access private
// @param $property-name: string | A heading property name (required). | $th-property-units
// @param $_return: number | Propertie's "convert to" unit.

@function _th-property-unit-get(
  $property-name
){
  $_return: $property-name;
  $_return: map-get($th-property-units, $property-name);
  @return $_return;
}

// @function _th-property-unit-convert
//
// Returns a property's "converted" value.
// @access private
// @param $property-name: string | A heading property name (required). | $th-property-units
// @param $value: number | number | A "to convert" value.
// @param $base-font-size: number | Font size used for relative calculations.
// @return $_return: number | A "converted" value.

@function _th-property-unit-convert(
  $property-name,
  $property-value,
  $base-font-size: $th-base-font-size
){
  @if not map-has-key($th-property-units, $property-name) {
    @return $property-value;
  }
  $_return: $property-value;
  $unit: _th-property-unit-get($property-name);
  @if not $unit or $unit == unit($property-value) {
    @return $_return;
  }
  $function: th-unit-convert-#{$unit};
  @if function-exists($function) {
    $_return: call($function, $property-value, $base-font-size);
  }
  @return $_return;
}