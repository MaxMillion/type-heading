// Tests / Functions / Helpers

// th-math-power()
// ------------------------------

function th-math-power {

  @include th-assert(
    $describe: "Calculate power of 5 to 3.",
    $expect: 125,
    $actual: th-math-power(5, 3)
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

  @include th-assert(
    $describe: "Calculate power of 5 to 1.",
    $expect: 5,
    $actual: th-math-power(5, 1)
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

  @include th-assert(
    $describe: "Calculate power of -5 to 3.",
    $expect: -125,
    $actual: th-math-power(-5, 3)
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

}

// th-list-has-index()
// ------------------------------

function th-list-has-index {

  @include th-assert(
    $describe: "Check list for an index.",
    $expect: true,
    $actual: th-list-has-index( (1, 2, 3), 1 )
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

  @include th-assert(
    $describe: "Check list for an index.",
    $expect: false,
    $actual: th-list-has-index( (1, 2, 3), 4 )
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

}

// th-math-power()
// ------------------------------

function th-math-round-to {

  @include th-assert(
    $describe: "Round 5.0246 to 3 decimal places",
    $expect: 5.025,
    $actual: th-math-round-to(5.0246, 3)
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

}

// th-list-get-deep()
// ------------------------------

function th-list-get-deep {

  @include th-assert(
    $describe: "Get a value from a list by index.",
    $expect: 40px,
    $actual: th-list-get-deep( (10px, (20px, 30px), 40px), 3 )
  ){
    @include th-assert-expect {
      number: $expect;
    }
    @include th-assert-actual {
      number: $actual;
    }
  }

  @include th-assert(
    $describe: "Get a value from a list by list of indexes.",
    $expect: 30px,
    $actual: th-list-get-deep( (10px, (20px, 30px)), (2, 2) ),
    $warn: false
  ){
    @include th-assert-expect {
      number: $expect;
    }
    @include th-assert-actual {
      number: $actual;
    }
  }

}

// th-list-deep-has()
// ------------------------------

function th-list-deep-has {

  @include th-assert(
    $describe: "Check list for a value.",
    $expect: true,
    $actual: th-list-deep-has( (a, (b, c), d), a)
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

  @include th-assert(
    $describe: "Check list for a deep value.",
    $expect: true,
    $actual: th-list-deep-has( (a, (b, c), d), c)
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

  @include th-assert(
    $describe: "Check list for a deep value that doesnt exist.",
    $expect: false,
    $actual: th-list-deep-has( (a, (b, c), d), e)
  ){
    @include th-assert-expect {
      boolean: $expect;
    }
    @include th-assert-actual {
      boolean: $actual;
    }
  }

}

// th-list-has()
// ------------------------------

function th-list-has {

  @include th-assert(
    $describe: "Check list for value x (exists).",
    $expect: true,
    $actual: th-list-has( (a, b, x), x )
  ){
    @include th-assert-expect {
      map: $expect;
    }
    @include th-assert-actual {
      map: $actual;
    }
  }

  @include th-assert(
    $describe: "Check list for value x (doesn't exist).",
    $expect: false,
    $actual: th-list-has( (a, b, c), x )
  ){
    @include th-assert-expect {
      map: $expect;
    }
    @include th-assert-actual {
      map: $actual;
    }
  }

}

// th-list-remove-nth()
// ------------------------------

function th-list-remove-nth {

  @include th-assert(
    $describe: "Remove an item from a list by index.",
    $expect: a b c,
    $actual: th-list-remove-nth( (a, b, c, d), 4 )
  ){
    @include th-assert-expect {
      map: $expect;
    }
    @include th-assert-actual {
      map: $actual;
    }
  }

}

// th-unit-strip()
// ------------------------------

function th-unit-strip {

  @include th-assert(
    $describe: "Strip unit from 32px.",
    $expect: 32,
    $actual: th-unit-strip(32px)
  ){
    @include th-assert-expect {
      map: $expect;
    }
    @include th-assert-actual {
      map: $actual;
    }
  }

}

// th-unit-cast()
// ------------------------------

function th-unit-cast {

  @include th-assert(
    $describe: "Create a 32px number.",
    $expect: 32px,
    $actual: th-unit-cast(32, px)
  ){
    @include th-assert-expect {
      map: $expect;
    }
    @include th-assert-actual {
      map: $actual;
    }
  }

  @include th-assert(
    $describe: "Create a 32foo number (doesn't exist).",
    $expect: 32,
    $actual: th-unit-cast(32, foo)
  ){
    @include th-assert-expect {
      map: $expect;
    }
    @include th-assert-actual {
      map: $actual;
    }
  }

}

// th-unit-convert()
// ------------------------------

function th-unit-convert {

  @include th-assert(
    $describe: "Bind 32 to em.",
    $expect: 32em,
    $actual: th-unit-cast(32, em)
  ){
    @include th-assert-expect {
      map: $expect;
    }
    @include th-assert-actual {
      map: $actual;
    }
  }

}